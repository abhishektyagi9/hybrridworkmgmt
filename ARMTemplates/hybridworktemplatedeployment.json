{
    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "storageAccountName": {
            "type": "string",
            "metadata": {
                "description": "Name of storage accounts"
            },
            "defaultValue":""
        },
        "blobContainerName": {
            "type": "string",
            "metadata": {
                "description": "name of blob container to save forms"
            }
        },
          "storageAccountType": {
      "type": "string",
           "allowedValues": [
        "Standard_LRS",
        "Standard_GRS",
        "Standard_RAGRS"
      ],
      "metadata": {
        "description": "Storage Account type"
      }
    },
       "functionAppName": {
      "type": "string",
      "metadata": {
        "description": "The name of the Azure Function app."
      }
    },
           "functionWorkerRuntime": {
      "type": "string",
      "allowedValues": [
        "dotnet",
        "node",
        "python",
        "java"
      ],
      "metadata": {
        "description": "The language worker runtime to load in the function app."
      }
    },
    "functionHostingPlan": {
      "type": "string",
      "metadata": {
        "description": "Hosting plan for azure function"
      }
    },
    "linuxFxVersion": {
      "type": "string",
      "metadata": {
        "description": "Required for Linux app to represent runtime stack in the format of 'runtime|runtimeVersion'. For example: 'python|3.9'"
      },
        "defaultValue":"DOTNET|6.0"
    
    },
    
         "computerVisionAccountName": {
             "type": "string",
             "metadata": {
                 "description": "Computer vision service to process licenses"
             }
         },
     
         "apiType": {
             "type": "string",
             
             "metadata": {
                 "description": "API for ComputerVision vision"
             },
             "defaultValue":"ComputerVision"
             
         },
         "computerVisionSku": {
             "type": "string",
             "metadata": {
                 "description": "Sku for form recognizer i.e S0 or F0"
             },
               "defaultValue":"F0"
         },
        "cosmosDbAccountName": {
          "type": "string",
          "metadata": {
            "description": "This column is used for creating cosmos db in serverless mode"
          }
        },
        "sqlServerName": {
          "type": "string",
          "metadata": {
            "description": "this column is used for defining sql server name"
          }
        },
        "sqlDatabaseName": {
          "type": "string",
          "metadata": {
            "description": "this column is used for defining sql server name"
          }
        },
        "sqlServerUsername": {
          "type": "string",
          "metadata": {
            "description": "this column is used for defining sql server username"
          }
        },
        "sqlServerPassword": {
          "type": "string",
          "metadata": {
            "description": "this column is used for defining sql server password"
          }
        }

    },
    "functions": [],
  "variables": {
    "hostingPlanName": "[parameters('functionHostingPlan')]",
    "applicationInsightsName": "[variables('functionAppName')]",
    "storageAccountName": "[toLower( concat( parameters('storageaccountname'), uniqueString(resourceGroup().id) ) )]",
    "computervisionaccountaname": "[toLower( concat( parameters('computerVisionAccountName'), uniqueString(resourceGroup().id) ) )]",
    "functionappname": "[toLower( concat( parameters('functionAppName'), uniqueString(resourceGroup().id) ) )]",
    "cosmosdbaccountname": "[toLower( concat( parameters('cosmosDbAccountName'), uniqueString(resourceGroup().id) ) )]",
    "sqlservername": "[toLower( concat( parameters('sqlServerName'), uniqueString(resourceGroup().id) ) )]"

  },
    "resources": [
        {
            "name": "[variables('storageAccountName')]",
            "type": "Microsoft.Storage/storageAccounts",
            "apiVersion": "2021-04-01",
            "tags": {
                "displayName": ","
            },
            "location": "[resourceGroup().location]",
            "kind": "StorageV2",
            "sku": {
                "name": "[parameters('storageAccountType')]",
                "tier": "Standard"
            }
        },
        {
          "name": "[concat(variables('storageaccountname'),'/default/',parameters('blobcontainername'))]",
          "type": "Microsoft.Storage/storageAccounts/blobServices/containers",
          "apiVersion": "2021-04-01",
          "dependsOn": [
            "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName'))]"
          ],
          "properties": {
            "publicAccess": "None"
          }
        },
     {
            "type": "Microsoft.DocumentDb/databaseAccounts",
            "apiVersion": "2022-02-15-preview",
            "name": "[variables('cosmosdbaccountname')]",
            "location": "[resourceGroup().location]",
            "tags": {
              
                "hidden-cosmos-mmspecial": ""
            },
            "kind": "GlobalDocumentDB",
            "properties": {
                "databaseAccountOfferType": "Standard",
                "locations": [
                    {
                        "id": "[concat(variables('cosmosdbaccountname'), '-', resourceGroup().location)]",
                        "failoverPriority": 0,
                        "locationName": "[resourceGroup().location]"
                    }
                ],
                "backupPolicy": {
                    "type": "Periodic",
                    "periodicModeProperties": {
                        "backupIntervalInMinutes": 240,
                        "backupRetentionIntervalInHours": 8,
                        "backupStorageRedundancy": "Local"
                    }
                },
                "isVirtualNetworkFilterEnabled": false,
                "virtualNetworkRules": [],
                "ipRules": [],
                "dependsOn": [],
                "capabilities": [
                    {
                        "name": "EnableServerless"
                    }
                ],
                "enableFreeTier": false
            }
        },
        {
      "type": "Microsoft.Web/serverfarms",
      "apiVersion": "2021-02-01",
      "name": "[variables('hostingPlanName')]",
      "location": "[resourceGroup().location]",
      "sku": {
        "name": "Y1",
        "tier": "Dynamic",
        "size": "Y1",
        "family": "Y"
      },
      "properties": {
        "computeMode": "Dynamic",
        "reserved": true
      }
    },{
      "type": "microsoft.insights/components",
      "apiVersion": "2020-02-02",
      "name": "[variables('applicationInsightsName')]",
      "location": "[resourceGroup().location]",
      "tags": {
        "[concat('hidden-link:', resourceId('Microsoft.Web/sites', variables('applicationInsightsName')))]": "Resource"
      },
      "properties": {
        "Application_Type": "web"
      },
      "kind":"web"
    },
    {
      "type": "Microsoft.Web/sites",
      "apiVersion": "2021-02-01",
      "name": "[variables('functionAppName')]",
      "location": "[resourceGroup().location]",
      "kind": "functionapp,linux",
      "dependsOn": [
        "[resourceId('Microsoft.Web/serverfarms', variables('hostingPlanName'))]",
        "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName'))]",
        "[resourceId('Microsoft.Insights/components', variables('applicationInsightsName'))]"
      ],
      "properties": {
        "reserved": true,
        "serverFarmId": "[resourceId('Microsoft.Web/serverfarms', variables('hostingPlanName'))]",
        "siteConfig": {          
          "linuxFxVersion": "[parameters('linuxFxVersion')]",
          "appSettings": [
            {
              "name": "APPINSIGHTS_INSTRUMENTATIONKEY",
              "value": "[reference(resourceId('Microsoft.Insights/components', variables('functionAppName')), '2015-05-01').InstrumentationKey]"
            },
            {
              "name": "AzureWebJobsStorage",
              "value": "[concat('DefaultEndpointsProtocol=https;AccountName=', variables('storageAccountName'), ';EndpointSuffix=', environment().suffixes.storage, ';AccountKey=',listKeys(resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName')), '2019-06-01').keys[0].value)]"
            },
            {
              "name": "FUNCTIONS_EXTENSION_VERSION",
              "value": "~4"
            },
            {
              "name": "FUNCTIONS_WORKER_RUNTIME",
              "value": "[parameters('functionWorkerRuntime')]"
            }
          ]    
        }}},
      {
        "type": "Microsoft.CognitiveServices/accounts",
        "apiVersion": "2022-03-01",
        "name": "[variables('computervisionaccountaname')]",
        "location": "[resourceGroup().location]",
        "sku": {
          "name": "[parameters('computervisionsku')]"
        },
        "kind": "[parameters('apiType')]",
        "properties": {
          "customSubDomainName": "[toLower(variables('computervisionaccountaname'))]"
        }
      },
      {
        "name": "[variables('sqlservername')]",
        "type": "Microsoft.Sql/servers",
        "apiVersion": "2014-04-01",
        "location": "[resourceGroup().location]",
        "tags": {
          "displayName": "[variables('sqlservername')]"
        },
        "properties": {
          "administratorLogin": "[parameters('sqlServerUsername')]",
          "administratorLoginPassword": "[parameters('sqlServerPassword')]"
        },
        "resources": [
          {
            "type": "firewallRules",
            "apiVersion": "2014-04-01",
            "dependsOn": [
              "[resourceId('Microsoft.Sql/servers', variables('sqlservername'))]"
            ],
            "location": "[resourceGroup().location]",
            "name": "AllowAllWindowsAzureIps",
            "properties": {
              "startIpAddress": "0.0.0.0",
              "endIpAddress": "0.0.0.0"
            }
          }
        ]
      },
      {
        "name": "[concat(variables('sqlservername'),'/default/',parameters('sqlDatabaseName'))]",
        "type": "Microsoft.Sql/servers/databases",
        "apiVersion": "2014-04-01",
        "location": "[resourceGroup().location]",
        "tags": {
          "displayName": "[variables('sqlservername')]"
        },
        "dependsOn": [
          "[resourceId('Microsoft.Sql/servers', variables('sqlservername'))]"
        ],
        "properties": {
          "collation": "SQL_Latin1_General_CP1_CI_AS",
          "edition": "Basic",
          "maxSizeBytes": "1073741824",
          "requestedServiceObjectiveName": "Basic"
        }
      }
            
               ],
    "outputs": {}
}